services:
  mysql_ordersdb:
    image: mysql:latest
    container_name: mysql-ordersdb-container
    environment:
      MYSQL_ROOT_PASSWORD: admin12345
      MYSQL_DATABASE: orders_db
    volumes:
      - ./docker/mysql/orders_db_data:/var/lib/mysql
    networks:
      - ali-network
    ports:
      - "3306:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql_productsdb:
    image: mysql:latest
    container_name: mysql-productsdb-container
    environment:
      MYSQL_ROOT_PASSWORD: admin12345
      MYSQL_DATABASE: products_db
    volumes:
      - ./docker/mysql/products_db_data:/var/lib/mysql
    networks:
      - ali-network
    ports:
      - "3307:3307"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak-mysql:
    container_name: keycloak-mysql-container
    image: mysql:latest
    volumes:
      - ./volume-data/mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  keycloak:
    container_name: keycloak-container
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: keycloak-mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8181:8080"
    volumes:
      - ./docker/keycloak/realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  eureka-server:
    build:
      context: ./discoveryservice
      dockerfile: Dockerfile
    container_name: eureka-server
    environment:
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
      - EUREKA_SERVER_ENABLE_SELF_PRESERVATION=false
    networks:
      - ali-network
    ports:
      - "8787:8787"

  products-service:
    build:
      context: ./ProductoService
      dockerfile: Dockerfile
    container_name: products-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql_productsdb:3307/products_db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=admin12345
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8787/eureka/
    depends_on:
      mysql_productsdb:
        condition: service_healthy
      eureka-server:
        condition: service_started
    networks:
      - ali-network
    ports:
      - "8083:8080"

  orders-service:
    build:
      context: ./OrdenService
      dockerfile: Dockerfile
    container_name: orders-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql_ordersdb:3306/orders_db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=admin12345
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8787/eureka/
    depends_on:
      mysql_ordersdb:
        condition: service_healthy
      eureka-server:
        condition: service_started
    networks:
      - ali-network
    ports:
      - "8084:8080"

  apigateway:
    build:
      context: ./apigateway
      dockerfile: Dockerfile
    container_name: apigateway
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8787/eureka/
    depends_on:
      eureka-server:
        condition: service_started
    networks:
      - ali-network
    ports:
      - "8080:8080"

volumes:
  orders_db_data:
  products_db_data:
  eureka-server:
  orders-service:
  products-service:

networks:
  ali-network:
    driver: bridge